apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: execute-tools
spec:
  envFrom:
    - configMapRef:
        name: environment-properties
  params:
    - name: node-version
      value: $(params.node-version)
    - name: npm-version
      value: $(params.npm-version)
    - name: target-branch
      value: $(params.target-branch)
    - name: continuous-delivery-context-secret
      value: $(params.continuous-delivery-context-secret)      
  workspaces:
    - name: output
      mountPath: /artifacts
  steps:
    - name: check-node-version
      image: node:$(params.node-version)
      script: |
        #!/bin/bash
        echo "Checking Node.js version..."
        node -v

    - name: audit
      image: node:$(params.node-version)
      script: |
        #!/bin/bash
        
        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi

        npm run audit

        if [ $? -eq 0 ]; then
          touch audit.succeeded
        else
          touch audit.failed
          exit 1
        fi        
    - name: lint
      image: node:$(params.node-version)
      script: |
        #!/bin/bash

        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi

        npm run lint

        if [ $? -eq 0 ]; then
          touch lint.succeeded
        else
          touch lint.failed
          exit 1
        fi
    - name: commitlint
      image: node:$(params.node-version)
      script: |
        #!/bin/bash

        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi

        node_modules/.bin/commitlint --from $(git describe --tags --abbrev=0)

        if [ $? -eq 0 ]; then
          touch commitlint.succeeded
        else
          touch commitlint.failed
          exit 1
        fi
    - name: depcheck
      image: node:$(params.node-version)
      script: |
        #!/bin/bash

        NODE_VERSION="v23"
        echo "Node.js version to install: $NODE_VERSION"

        # Install NVM if not already installed
        if ! command -v nvm &> /dev/null; then
          echo "NVM not found. Installing NVM..."
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        else
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        fi

        # Install the specified Node.js version using the RC mirror
        echo "Attempting to install Node.js version $NODE_VERSION..."
        NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/rc nvm install "$NODE_VERSION" || {
          echo "RC installation failed. Attempting to install Node.js version $NODE_VERSION using Nightly mirror..."
          NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly nvm install "$NODE_VERSION"
        }

        # Use the installed version
        nvm use "$NODE_VERSION"
        echo "Node: $(node --version)"

        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi

        npm run depcheck

        if [ $? -eq 0 ]; then
          touch depcheck.succeeded
        else
          touch depcheck.failed
          exit 1
        fi
    - name: clean-aws
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AWS_ACCESS_KEY_ID"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AWS_SECRET_ACCESS_KEY"
      image: node:$(params.node-version)
      script: |
        #!/bin/bash

        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi

        bin/clean-aws.js --service=s3
        bin/clean-aws.js --service=dynamodb
        bin/clean-aws.js --service=sqs
        bin/clean-aws.js --service=kinesis